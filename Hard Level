//SQL code

CREATE DATABASE UniversityDB;

USE UniversityDB;

CREATE TABLE Student (
    StudentID INT PRIMARY KEY,
    Name VARCHAR(50),
    Department VARCHAR(50),
    Marks DOUBLE
);

INSERT INTO Student VALUES
(101, 'Rahul', 'Computer Science', 85.5),
(102, 'Priya', 'Electrical', 90.0),
(103, 'Ankit', 'Mechanical', 78.5);


// Java code

package models;

public class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    // Constructor
    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    // Getters and Setters
    public int getStudentID() { return studentID; }
    public void setStudentID(int studentID) { this.studentID = studentID; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDepartment() { return department; }
    public void setDepartment(String department) { this.department = department; }

    public double getMarks() { return marks; }
    public void setMarks(double marks) { this.marks = marks; }
}

package controllers;

import models.Student;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentController {
    private static final String URL = "jdbc:mysql://localhost:3306/UniversityDB?useSSL=false&serverTimezone=UTC";
    private static final String USER = "root";      // Your MySQL username
    private static final String PASSWORD = "your_password"; // Your MySQL password

    // Method to get all student records
    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<>();
        try (Connection con = DriverManager.getConnection(URL, USER, PASSWORD);
             Statement stmt = con.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM Student")) {

            while (rs.next()) {
                students.add(new Student(
                        rs.getInt("StudentID"),
                        rs.getString("Name"),
                        rs.getString("Department"),
                        rs.getDouble("Marks")
                ));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return students;
    }

    // Method to insert a new student
    public void insertStudent(Student student) {
        try (Connection con = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = con.prepareStatement(
                     "INSERT INTO Student VALUES (?, ?, ?, ?)")) {

            pstmt.setInt(1, student.getStudentID());
            pstmt.setString(2, student.getName());
            pstmt.setString(3, student.getDepartment());
            pstmt.setDouble(4, student.getMarks());

            pstmt.executeUpdate();
            System.out.println("Student inserted successfully!");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to update student marks
    public void updateStudentMarks(int studentID, double newMarks) {
        try (Connection con = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = con.prepareStatement(
                     "UPDATE Student SET Marks = ? WHERE StudentID = ?")) {

            pstmt.setDouble(1, newMarks);
            pstmt.setInt(2, studentID);

            pstmt.executeUpdate();
            System.out.println("Marks updated successfully!");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method to delete a student record
    public void deleteStudent(int studentID) {
        try (Connection con = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement pstmt = con.prepareStatement(
                     "DELETE FROM Student WHERE StudentID = ?")) {

            pstmt.setInt(1, studentID);
            pstmt.executeUpdate();
            System.out.println("Student deleted successfully!");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


package views;

import models.Student;
import java.util.List;

public class StudentView {
    public void displayAllStudents(List<Student> students) {
        System.out.println("\nStudentID | Name | Department | Marks");
        System.out.println("----------------------------------------");

        for (Student student : students) {
            System.out.println(student.getStudentID() + " | " +
                               student.getName() + " | " +
                               student.getDepartment() + " | " +
                               student.getMarks());
        }
    }

    public void displaySuccessMessage(String message) {
        System.out.println(message);
    }

    public void displayErrorMessage(String message) {
        System.out.println("Error: " + message);
    }
}

import controllers.StudentController;
import models.Student;
import views.StudentView;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        StudentController controller = new StudentController();
        StudentView view = new StudentView();

        while (true) {
            System.out.println("\n1. View All Students");
            System.out.println("2. Insert Student");
            System.out.println("3. Update Student Marks");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1 -> view.displayAllStudents(controller.getAllStudents());
                case 2 -> {
                    System.out.print("Enter Student ID: ");
                    int id = sc.nextInt();
                    sc.nextLine();  // Consume newline
                    System.out.print("Enter Name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter Department: ");
                    String department = sc.nextLine();
                    System.out.print("Enter Marks: ");
                    double marks = sc.nextDouble();

                    controller.insertStudent(new Student(id, name, department, marks));
                }
                case 3 -> {
                    System.out.print("Enter Student ID to Update: ");
                    int id = sc.nextInt();
                    System.out.print("Enter New Marks: ");
                    double marks = sc.nextDouble();

                    controller.updateStudentMarks(id, marks);
                }
                case 4 -> {
                    System.out.print("Enter Student ID to Delete: ");
                    int id = sc.nextInt();

                    controller.deleteStudent(id);
                }
                case 5 -> {
                    System.out.println("Exiting...");
                    return;
                }
                default -> System.out.println("Invalid choice! Try again.");
            }
        }
    }
}


